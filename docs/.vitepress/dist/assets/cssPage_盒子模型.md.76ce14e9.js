import{_ as e,o as a,c as t,V as o}from"./chunks/framework.bbb6cb24.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cssPage/盒子模型.md","filePath":"cssPage/盒子模型.md","lastUpdated":1717654037000}'),r={name:"cssPage/盒子模型.md"},d=o('<h2 id="一、w3c盒模型-标准盒模型" tabindex="-1">一、W3C盒模型（标准盒模型） <a class="header-anchor" href="#一、w3c盒模型-标准盒模型" aria-label="Permalink to &quot;一、W3C盒模型（标准盒模型）&quot;">​</a></h2><p>通过给元素添加<code>box-sizing: content-box;</code>属性，可以改变元素的盒模型，让元素在计算盒子大小的时候，把元素的内边距和边框也计算进去。 <br> 标签的实际宽度 = 设置的宽度 + 内边距（padding） + 边框（border）。宽度由content组成。</p><h2 id="二、怪异盒模型" tabindex="-1">二、怪异盒模型 <a class="header-anchor" href="#二、怪异盒模型" aria-label="Permalink to &quot;二、怪异盒模型&quot;">​</a></h2><p>通过给元素添加<code>box-sizing: border-box;</code>属性，转换为怪异盒模型。<br> 实际宽度=设置的宽度=content+border+padding；</p><h2 id="三、区别" tabindex="-1">三、区别 <a class="header-anchor" href="#三、区别" aria-label="Permalink to &quot;三、区别&quot;">​</a></h2><p>主要区别：对于宽高的定义不同<br> w3c盒模型：设置的宽度就等于内容的宽度，增加padding和border会增加元素的占位宽度。<br> 怪异盒模型：内容的宽度 = 设置的宽度 - border的宽度 - padding的宽度，增加padding和border不会增加元素的占位。<br></p>',6),n=[d];function c(s,i,_,p,l,b){return a(),t("div",null,n)}const f=e(r,[["render",c]]);export{m as __pageData,f as default};
