import{_ as e,o as i,c as o,O as l}from"./chunks/framework.f59a8fe5.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dockerPage/2.docker基本命令.md","filePath":"dockerPage/2.docker基本命令.md","lastUpdated":null}'),r={name:"dockerPage/2.docker基本命令.md"},c=l('<h2 id="一、docker三大特征" tabindex="-1">一、Docker三大特征 <a class="header-anchor" href="#一、docker三大特征" aria-label="Permalink to &quot;一、Docker三大特征&quot;">​</a></h2><ul><li>镜像（images）：一个只读模板，一个<code>images</code>文件可以创建多个<code>container</code>容器。他本身也是一个文件，成为镜像文件。</li><li>容器（container）：镜像的运行实例，一个<code>container</code>容器是一个可读写的文件，可以执行各种操作。可以启动，开始，停止，删除。每个container都是相互隔离的。 container 看做是一个简易版的linux环境。</li><li>仓库（repository）：用来保存镜像文件的仓库，一个仓库中可以包含多个镜像。仓库分为公有仓库和私有仓库。Docker <strong>镜像就是模板，container就是image的实例。container就好比如对象，images好比如类</strong></li></ul><h2 id="二、docker帮助命令" tabindex="-1">二、Docker帮助命令 <a class="header-anchor" href="#二、docker帮助命令" aria-label="Permalink to &quot;二、Docker帮助命令&quot;">​</a></h2><ul><li>docker version 查看版本</li><li>docker info 详细信息</li><li>docker -help</li><li>systemctl start docker 启动docker</li></ul><h2 id="三、docker镜像命令" tabindex="-1">三、Docker镜像命令 <a class="header-anchor" href="#三、docker镜像命令" aria-label="Permalink to &quot;三、Docker镜像命令&quot;">​</a></h2><ul><li><code>docker images</code>：列出本地镜像。-a：列出所有镜像。-q：查询镜像id。–digests：显示镜像摘要，备注。例：docker images -qa 查询全部镜像id</li><li><code>docker search</code>：镜像名字：在docker hub上查找镜像。</li><li><code>docker pull</code>：镜像名字：下载镜像</li><li><code>docker rmi -f</code>： 镜像名字：删除镜像。 例：docker rmi -f $(docker images -qa) 删除全部镜像</li></ul><h2 id="四、docker容器命令" tabindex="-1">四、Docker容器命令 <a class="header-anchor" href="#四、docker容器命令" aria-label="Permalink to &quot;四、Docker容器命令&quot;">​</a></h2><ul><li>启动容器：<code>docker run options --name（将启动的容器重新命名） 镜像名</code><ul><li>options说明： <ul><li>-i：以交互模式运行容器，通常与-t同时使用</li><li>-t：为容器重新分配一个伪输入终端，通常与-i使用。</li><li>例：docker run -it 容器名/容器id</li></ul></li></ul></li><li>列出当前所有运行的容器：<code>docker ps options</code><ul><li>options说明： <ul><li>-a :列出当前所有正在运行的容器+历史上运行的</li><li>-l：显示最近创建的容器</li><li>-n：显示最近n个创建的容器</li><li>-q：静默模式，只显示容器编号</li><li>--no-trunc：不截断输出</li></ul></li></ul></li><li>退出容器：exit：离开并且关闭 ctrl+p+q：暂时退出，不关闭容器</li><li>启动容器：docker start 容器名/容器id</li><li>重启容器：docker restart 容器名/容器id</li><li>停止容器：docker stop 容器名/容器id</li><li>删除已经停止的容器：docker rm 容器名/容器id</li><li>比较重要的：</li></ul><ol><li><code>docker run -d 容器名</code>（以后台的形式运行容器，docker后台运行没有和前台交互，容器会自动结束） <br>例：docker run -d -p 6666:8080 tomcat (后台运行)</li><li>查看容器日志：docker logs -f -t – tail 容器id -t是加入时间戳 -f是跟随最新的日志打印 --tail数字显示最后多少条</li><li>查看容器运行的进程：docker top 容器id</li><li>查看容器内部细节：docker inspect 容器id</li><li>从容器内拷贝到宿主机上：docker cp 容器id：容器内路径 目的主机路径</li><li>重新进入容器： <ul><li>docker attach 容器id：直接进入容器启动命令终端，不会启动新的进程</li><li>docker exec -it 容器id：在容器中打开新的终端，并且可以启动新的进程</li></ul></li></ol>',9),d=[c];function a(t,n,k,s,u,_){return i(),o("div",null,d)}const p=e(r,[["render",a]]);export{m as __pageData,p as default};
