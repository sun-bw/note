import{_ as e,o as a,c as o,O as l}from"./chunks/framework.f59a8fe5.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScriptPage/1.数据，变量，内存.md","filePath":"JavaScriptPage/1.数据，变量，内存.md","lastUpdated":1701413042000}'),c={name:"JavaScriptPage/1.数据，变量，内存.md"},n=l(`<h2 id="一、数据类型" tabindex="-1">一、数据类型 <a class="header-anchor" href="#一、数据类型" aria-label="Permalink to &quot;一、数据类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=null</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> a)</span><span style="color:#676E95;font-style:italic;">//object</span></span></code></pre></div><p>用<code>typeof</code>判断<code>null</code>类型输出为<code>object</code>.<br><code>===</code> 只能判断 <code>undefined</code>和<code>null</code><br><code>typeof</code>可以判断<code> undefined，number，string，boolean，function</code> 不能判断 <code>null</code>和<code>object</code>。 <code>undefined</code>和<code>null</code>的区别： <code>undefined</code>代表未定义 <code>null</code>赋值了，值没赋到。</p><h2 id="二、数据-变量-内存" tabindex="-1">二、数据，变量，内存 <a class="header-anchor" href="#二、数据-变量-内存" aria-label="Permalink to &quot;二、数据，变量，内存&quot;">​</a></h2><ul><li>栈：全局变量，局部变量</li><li>堆：对象</li></ul><ol><li><code>var a = {name: &#39;tom&#39;}</code> a存在栈里面，关联存储的地址比如：0x100。内容在堆，通过一个物理地址0x100进行关联a和值。</li><li><code>var a = 1</code> <code>var b = a;</code> 改变b的值，a的值不改变,在栈内存先存储一个a=1，之后又在栈内存存储了一个b=1;</li><li><code>var a={name: &#39;tom&#39;}</code> <code>var b=a;</code> 通过<code>b.name=&#39;tony&#39;</code>,改变值,打印a,a的值也发生也改变。因为a b,在栈内存存储了一个物理地址，指向了同一个堆内存.</li></ol><h2 id="三、js引擎管理内存" tabindex="-1">三、js引擎管理内存 <a class="header-anchor" href="#三、js引擎管理内存" aria-label="Permalink to &quot;三、js引擎管理内存&quot;">​</a></h2><p>内存生命周期：分配内存，使用内存，释放内存。</p><ul><li>局部变量：函数执行完，释放内存。</li><li>对象：成为垃圾对象=》垃圾回收机制=》标记清除</li><li>全局变量：常驻内存，直到关闭网页。 <ol><li>var a = 3 占用一个内存空间</li><li>var obj={} 占用两个内存空间， obj占用一个， {}内容占用一个。</li><li>函数内的变量，运行时声明，函数运行结束释放内存。</li><li>函数内声明对象， var b ={} b自动释放，b所指向的对象{} 在某个时刻由垃圾回收器回收</li></ol></li></ul>`,9),s=[n];function t(d,i,r,p,_,u){return a(),o("div",null,s)}const f=e(c,[["render",t]]);export{h as __pageData,f as default};
